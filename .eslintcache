[{"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\index.js":"1","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\App.js":"2","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Header.js":"3","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Block.js":"4","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Coinbase.js":"5","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Blockchain.js":"6","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Tokens.js":"7","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Signatures.js":"8","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Distributed.js":"9","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\FatBlockchain.js":"10","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Keys.js":"11","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Transaction.js":"12","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\SimpleHashFunction.js":"13","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Peer.js":"14","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\services\\KeysService.js":"15","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Block2.js":"16","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Fblock.js":"17","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\services\\BlockService.js":"18","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Tblock.js":"19","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\TCblock.js":"20"},{"size":164,"mtime":1635705597279,"results":"21","hashOfConfig":"22"},{"size":1256,"mtime":1627652078396,"results":"23","hashOfConfig":"22"},{"size":1066,"mtime":1627652010069,"results":"24","hashOfConfig":"22"},{"size":3687,"mtime":1627812525875,"results":"25","hashOfConfig":"22"},{"size":642,"mtime":1626252805842,"results":"26","hashOfConfig":"22"},{"size":310,"mtime":1626161706821,"results":"27","hashOfConfig":"22"},{"size":600,"mtime":1626161831564,"results":"28","hashOfConfig":"22"},{"size":7816,"mtime":1633805682670,"results":"29","hashOfConfig":"22"},{"size":609,"mtime":1626161782213,"results":"30","hashOfConfig":"22"},{"size":634,"mtime":1626939991958,"results":"31","hashOfConfig":"22"},{"size":2507,"mtime":1627457077732,"results":"32","hashOfConfig":"22"},{"size":8764,"mtime":1627518594596,"results":"33","hashOfConfig":"22"},{"size":1191,"mtime":1625258111893,"results":"34","hashOfConfig":"22"},{"size":2900,"mtime":1627816924021,"results":"35","hashOfConfig":"22"},{"size":438,"mtime":1627204124692,"results":"36","hashOfConfig":"22"},{"size":6961,"mtime":1627811810088,"results":"37","hashOfConfig":"22"},{"size":14714,"mtime":1627551628371,"results":"38","hashOfConfig":"22"},{"size":927,"mtime":1626286203279,"results":"39","hashOfConfig":"22"},{"size":9866,"mtime":1627551601563,"results":"40","hashOfConfig":"22"},{"size":12355,"mtime":1627551610694,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vk3t8f",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\index.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\App.js",[],["90","91"],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Header.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Block.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Coinbase.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Blockchain.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Tokens.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Signatures.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Distributed.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\FatBlockchain.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Keys.js",["92"],"import React, { useEffect, useState } from 'react';\r\nimport KeyService from '../services/KeysService'\r\nconst EC = require('elliptic').ec\r\n\r\n\r\n\r\nfunction Keys() {\r\n    const ec = new EC('secp256k1')\r\n    const [keys, setKeys] = useState({});\r\n    \r\n    useEffect(() => {\r\n        bringKeys()\r\n    },[])\r\n\r\n    function bringKeys() {\r\n        let keyId = 1\r\n        KeyService.getKeys(keyId).then((res) => {\r\n            console.log(res.data)\r\n            setKeys(res.data)\r\n        });\r\n    }\r\n\r\n    function handleChange() {\r\n        console.log(\"User Interacted with the private key\")\r\n        let privateKey = document.getElementById(\"privateKey\").value\r\n        if (privateKey.length > 77){\r\n            random()\r\n            return\r\n        }\r\n        if (privateKey.length != 0){\r\n            let publicKeyFromPrivate = ec.keyFromPrivate(privateKey).getPublic('hex')\r\n            document.getElementById(\"publicKey\").value = publicKeyFromPrivate\r\n            saveKeyInDB(1,privateKey,publicKeyFromPrivate)\r\n        }\r\n\r\n    }\r\n    // Cant store privateKey type in DB so I changed it to String\r\n    function random() {\r\n        let key = ec.genKeyPair()\r\n        let privateKey = key.getPrivate()\r\n        //key.getPrivate() returns a BN object so we need to convert to string so we can store in DB\r\n        let StringPrivateKey = \"\" + privateKey + \"\"\r\n        document.getElementById(\"privateKey\").value = privateKey\r\n        document.getElementById(\"publicKey\").value = key.getPublic('hex')\r\n        saveKeyInDB(1,StringPrivateKey,key.getPublic('hex'))\r\n    }\r\n    function saveKeyInDB(keyId,privateKeyToString,publicKey) {\r\n        let newKey = {\r\n            keysId: keyId,\r\n            privateKey: privateKeyToString,\r\n            publicKey: publicKey\r\n        }\r\n        KeyService.updateKeys(keyId, newKey)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"Keys\">\r\n                <h1>Public / Private Keys Pair</h1>\r\n                <ul>\r\n                    <li><label>Private Key:</label></li>\r\n                    <li><input id=\"privateKey\" type=\"Number\" defaultValue={keys.privateKey} rows={1} onInput={handleChange.bind(this)} /><button onClick={random.bind(this)}>Random</button></li>           \r\n                    <li><label>Public Key:</label></li>\r\n                    <li><input id=\"publicKey\" disabled style={{ width: '97%' }} defaultValue={keys.publicKey} rows={1} /></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keys","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Transaction.js",["93","94"],"import React, { useEffect, useState } from 'react';\r\nimport KeyService from '../services/KeysService'\r\nconst EC = require('elliptic').ec;\r\n\r\n\r\nfunction Transaction(){\r\n    const ec = new EC('secp256k1')\r\n    const [keys, setKeys] = useState({});\r\n\r\n    var signature\r\n    var DBmessage\r\n    var DBprivateKey\r\n    var DBpublicKey\r\n    var DBto\r\n    var DBmoney\r\n\r\n    useEffect(() => {\r\n        bringKeys()\r\n    },[])\r\n\r\n    function bringKeys() {\r\n        let keyId = 1\r\n        KeyService.getKeys(keyId).then((res) => {\r\n            console.log(res.data)\r\n            setKeys(res.data)\r\n        });\r\n    }\r\n\r\n     function bringKeysAndCheck(callback) {\r\n        let keyId = 1\r\n        KeyService.getKeys(keyId).then((res) => {\r\n            setKeys(res.data)\r\n            DBmessage = res.data.message\r\n            DBprivateKey = res.data.privateKey\r\n            DBpublicKey = res.data.publicKey\r\n            DBto = res.data.to\r\n            DBmoney = res.data.money\r\n            callback()\r\n        });\r\n    }\r\n    function handleSignTabPublicKeyChanges(){\r\n        let publicKey = document.getElementById(\"from\").value\r\n        document.getElementById(\"from2\").value = publicKey\r\n    }\r\n    function handleVerifyPublicKeyTabChanges(){\r\n        let publicKey = document.getElementById(\"from2\").value\r\n        document.getElementById(\"from\").value = publicKey\r\n    }\r\n    function handleSignTabChanges() {\r\n    console.log(\"User Interacted with the Sign Tab info\")\r\n        let privateKey = document.getElementById(\"privateKey\").value\r\n        let money = document.getElementById(\"money\").value\r\n        document.getElementById(\"money2\").value = money\r\n        let to = document.getElementById(\"to\").value\r\n        document.getElementById(\"to2\").value = to\r\n        if (privateKey.length > 77){\r\n            random(money,to)\r\n            return\r\n        }\r\n        if (privateKey.length != 0){\r\n            let publicKeyFromPrivate = ec.keyFromPrivate(privateKey).getPublic('hex')\r\n            document.getElementById(\"from\").value = publicKeyFromPrivate\r\n            document.getElementById(\"from2\").value = publicKeyFromPrivate\r\n            saveKeyInDB(1,privateKey,publicKeyFromPrivate,money,to)\r\n        }\r\n\r\n    }\r\n    function random(money,to) {\r\n        let key = ec.genKeyPair()\r\n        let privateKey = key.getPrivate()\r\n        //key.getPrivate() returns a BN object so we need to convert to string so we can store in DB\r\n        let StringPrivateKey = \"\" + privateKey + \"\"\r\n        document.getElementById(\"privateKey\").value = privateKey\r\n        let publicKey = key.getPublic('hex')\r\n        document.getElementById(\"from\").value = publicKey\r\n        document.getElementById(\"from2\").value = publicKey\r\n        saveKeyInDB(1,StringPrivateKey,publicKey,money,to)\r\n    }\r\n    function handleVerifyTabChanges() {\r\n        let money = document.getElementById(\"money2\").value\r\n        document.getElementById(\"money\").value = money\r\n        let to = document.getElementById(\"to2\").value\r\n        document.getElementById(\"to\").value = to\r\n        let privateKey = document.getElementById(\"privateKey\").value\r\n        let publicKey = ec.keyFromPrivate(privateKey).getPublic('hex')\r\n        saveKeyInDB(1,privateKey,publicKey,money,to)\r\n    }\r\n    \r\n        function handleSignClicked(){\r\n        console.log(\"Sign\")\r\n         let money = document.getElementById(\"money\").value\r\n         let privateKey = document.getElementById(\"privateKey\").value\r\n         let publicKey = ec.keyFromPrivate(privateKey).getPublic('hex')\r\n         let to = document.getElementById(\"to\").value\r\n         // signature now uses also the person we send the money to \r\n         // in order to notice changes if user tries to change the addressee\r\n         signature = ec.sign(money + to,privateKey).r.toString('hex')\r\n         document.getElementById(\"from\").value = publicKey\r\n         document.getElementById(\"from2\").value = publicKey\r\n         document.getElementById(\"MessageSignature\").value = signature\r\n         document.getElementById(\"signature2\").value = signature\r\n         saveKeyInDB(1,privateKey,publicKey,money,to)\r\n    }\r\n    function checking(){\r\n        \r\n        let money = document.getElementById(\"money2\").value\r\n        let publicKey = document.getElementById(\"from2\").value\r\n        let currentSignature = document.getElementById(\"signature2\").value\r\n        let to = document.getElementById(\"to2\").value\r\n        signature = ec.sign(DBmoney + to,DBprivateKey).r.toString('hex')  \r\n        // eslint-disable-next-line\r\n        if(publicKey != DBpublicKey || money != DBmoney || currentSignature != signature || to != DBto){\r\n            document.getElementById(\"two-panel\").style.backgroundColor= 'lightpink' \r\n        }\r\n        else{\r\n            document.getElementById(\"two-panel\").style.backgroundColor= 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        }\r\n        \r\n    }\r\n\r\n    function verifyClicked(){\r\n        //Callback function to make sure we read the data from the DB otherwise the website will show an error\r\n        console.log(\"Verify\")\r\n        bringKeysAndCheck(checking) \r\n    }\r\n     function saveKeyInDB(keyId,privateKeyToString,publicKey,money,to) {\r\n        let newKey = {\r\n            keysId: keyId,\r\n            privateKey: privateKeyToString,\r\n            publicKey: publicKey,\r\n            money : money,\r\n            to: to\r\n        }\r\n        KeyService.updateKeys(keyId, newKey)\r\n\r\n    }\r\n\r\n    return(\r\n    <div className=\"warpper\">\r\n        <h1 style={{marginLeft:'5px'}}>Transaction</h1>\r\n        <input className=\"radio\" id=\"one\" name=\"group\" type=\"radio\" defaultChecked/>\r\n        <input className=\"radio\" id=\"two\" name=\"group\" type=\"radio\"/>\r\n        <div className=\"tabs\">\r\n            <label className=\"tab\" id=\"one-tab\" htmlFor=\"one\">Sign</label>\r\n            <label className=\"tab\" id=\"two-tab\" htmlFor=\"two\">Verify</label>\r\n        </div>\r\n\r\n        <div className=\"panels\">\r\n            <div className=\"panel Transaction\" id=\"one-panel\">\r\n                <ul className=\"tabUl\" style = {{listStyle:'none'}}>\r\n                    <li><label>Message</label></li>\r\n                </ul>\r\n                <ul className = \"columns\">\r\n                    <li><input value='$' disabled style={{width:'30px',textAlign:'center'}}/><input style={{width:'365px'}} id=\"money\" defaultValue={keys.money} onInput={handleSignTabChanges.bind(this)}/></li>\r\n                    <li><input value='From' disabled style={{width:'45px',textAlign:'center'}}/><input style={{width:'365px'}} id=\"from\" defaultValue={keys.publicKey} onInput={handleSignTabPublicKeyChanges.bind(this)}/></li>\r\n                    <li><input value='->' disabled style={{width:'30px',textAlign:'center'}}/><input style={{width:'360px'}} id=\"to\" defaultValue={keys.to} onInput={handleSignTabChanges.bind(this)}/></li>\r\n                </ul>\r\n                <ul className=\"rows\">\r\n                    <li><label>Private Key:</label></li>\r\n                    <li><input id=\"privateKey\" type='Number' defaultValue={keys.privateKey} onInput={handleSignTabChanges.bind(this)}/></li>\r\n                    <li><button className=\"blueButton\" style={{width:'91.7%'}} onClick = {handleSignClicked.bind(this)}>Sign</button></li>\r\n                    <li><label>Message Signature</label></li>\r\n                    <li><input id=\"MessageSignature\" disabled rows={1} /></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"panel\" id=\"two-panel\">\r\n                <ul className=\"tabUl\" style = {{listStyle:'none'}}>\r\n                    <li><label>Message</label></li>\r\n                </ul>\r\n                    <ul className = \"columns\">\r\n                        <li><input value='$' disabled style={{width:'30px',textAlign:'center'}}/><input style={{width:'365px'}} id=\"money2\" defaultValue={keys.money} onInput={handleVerifyTabChanges.bind(this)}/></li>\r\n                        <li><input value='From' disabled style={{width:'45px',textAlign:'center'}}/><input style={{width:'365px'}} id=\"from2\" defaultValue={keys.publicKey} onInput={handleVerifyPublicKeyTabChanges.bind(this)}/></li>\r\n                        <li><input value='->' disabled style={{width:'30px',textAlign:'center'}}/><input style={{width:'360px'}} id=\"to2\" defaultValue={keys.to} onInput={handleVerifyTabChanges.bind(this)}/></li>\r\n                    </ul>\r\n                    <ul className=\"rows\">\r\n                        <li><label>signature</label></li>\r\n                        <li><input id=\"signature2\"/></li>\r\n                        <li><button className=\"blueButton\" style={{width:'91.7%'}} onClick = {verifyClicked.bind(this)}>Verify</button></li>\r\n                    </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n\r\n}\r\nexport default Transaction","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\SimpleHashFunction.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Peer.js",["95"],"import React, { useEffect, useState } from 'react';\r\nimport BlockService from '../services/BlockService'\r\nimport Block2 from './Block2'\r\nimport Tblock from './Tblock'\r\nimport TCblock from './TCblock'\r\nimport Fblock from './Fblock'\r\n\r\n\r\nfunction Peer(props) {\r\n    const [blocks, setBlocks] = useState([]);\r\n    useEffect(() => {\r\n        bringBlocks()\r\n    }, [])\r\n    function bringBlocks() {\r\n        BlockService.getAllBlocksByPeerAndType(props.peerId, props.blockType).then((res) => {\r\n            setBlocks(res.data)\r\n        });\r\n\r\n    }\r\n    switch (props.blockType) {\r\n        //blockchain,distributed\r\n        case \"regular\":\r\n            return (\r\n                <div className=\"blockchain\">\r\n                    <ul>\r\n                        {\r\n                            blocks.map((block) =>\r\n                                <li key={block.blockId}> <Block2 id={block.blockId} blockNumber={block.blockNumber} nonce={block.nonce} data={block.data} prev={block.prev} hash={block.hash} peer={block.peer} /> </li>)\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            )\r\n        //token\r\n        case \"withTokens\":\r\n            return (\r\n                <div className=\"blockchain\">\r\n                    <ul>\r\n                        {\r\n                            blocks.map((block) =>\r\n                                <li key={block.blockId}> <Tblock id={block.blockId} blockNumber={block.blockNumber} nonce={block.nonce} data={block.data} tx={block.tx} prev={block.prev} hash={block.hash} peer={block.peer} /> </li>)\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            )\r\n        //coinbase\r\n        case \"withTokensAndCoinbase\":\r\n            return (\r\n                <div className=\"blockchain\">\r\n                    <ul>\r\n                        {\r\n                            blocks.map((block) =>\r\n                                <li key={block.blockId}> <TCblock id={block.blockId} blockNumber={block.blockNumber} nonce={block.nonce} data={block.data} tx={block.tx} coinbase={block.coinbase} prev={block.prev} hash={block.hash} peer={block.peer} /> </li>)\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            )\r\n        //fat blockchain\r\n        case \"fatBlockchain\":\r\n            return (\r\n                <div className=\"blockchain\">\r\n                    <ul>\r\n                        {\r\n                            blocks.map((block) =>\r\n                                <li key={block.blockId}> <Fblock id={block.blockId} blockNumber={block.blockNumber} nonce={block.nonce} data={block.data} tx={block.tx} coinbase={block.coinbase} prev={block.prev} hash={block.hash} peer={block.peer} /> </li>)\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            )\r\n        default:\r\n            return;\r\n    }\r\n\r\n}\r\n\r\nexport default Peer","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\services\\KeysService.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Block2.js",["96"],"import React, { useState,useEffect } from 'react';\r\nimport BlockService from '../services/BlockService';\r\nconst SHA256 = require('crypto-js/sha256')\r\n\r\n\r\nfunction Block2(props) {\r\n    const [bnumber, setBnumber] = useState(props.blockNumber)\r\n    const [nonce, setNonce] = useState(props.nonce)\r\n    const [data, setData] = useState(props.data)\r\n    const [prev, setPrev] = useState(props.prev)\r\n    const [hash, setHash] = useState(props.hash)\r\n\r\n    useEffect(() => {\r\n        \r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 5) {\r\n            let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n            let nextBlockPrev = document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value\r\n            if (myHash !== nextBlockPrev)\r\n                alert(\"One or more blocks do not have the correct PREV value as they should!!!\")\r\n            // changeBackgroundColorOfAllBlocks('lightpink')\r\n        }\r\n\r\n    }, [])\r\n    function calculateHashOnChange(block, nonce, data, prev) {\r\n        return SHA256(block + nonce + data + prev).toString()\r\n    }\r\n    function calculateHashForAllBlocks(blockOffset) {\r\n        for (let i = props.id + blockOffset; i < 6; i++) {\r\n            let tBlockNumber = document.getElementById(\"blockNumber\" + i + \"p\" + props.peer).value\r\n            let tNonce = document.getElementById(\"nonce\" + i + \"p\" + props.peer).value\r\n            let tData = document.getElementById(\"data\" + i + \"p\" + props.peer).value\r\n            let tPrev = document.getElementById(\"prev\" + i + \"p\" + props.peer).value\r\n            let newHash = calculateHashOnChange(tBlockNumber, tNonce, tData, tPrev)\r\n            let nextBlockId = i + 1\r\n            document.getElementById('result' + i + \"p\" + props.peer).value = newHash\r\n            if (i < 5)\r\n                document.getElementById('prev' + nextBlockId + \"p\" + props.peer).value = newHash\r\n        }\r\n    }\r\n    function checkIfNextBlockHashesAreValid(startingBlock) {\r\n        for (let i = startingBlock; i < 6; i++) {\r\n            if (document.getElementById(\"result\" + i + \"p\" + props.peer).value.substring(0, 4) === Array(5).join(\"0\"))\r\n                document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        }\r\n    }\r\n    function changeBackgroundColorOfAllBlocks(color) {\r\n        for (let i = props.id; i < 6; i++) {\r\n            document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = color\r\n        }\r\n    }\r\n\r\n    function handleChange() {\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myNonce = document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value\r\n        let myData = document.getElementById(\"data\" + props.id + \"p\" + props.peer).value\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        // eslint-disable-next-line\r\n        if (myBlockNumber != bnumber || myNonce != nonce || myData != data || myPrev != prev)\r\n            changeBackgroundColorOfAllBlocks('lightpink')\r\n        else\r\n            changeBackgroundColorOfAllBlocks('rgb(' + 227 + ',' + 250 + ',' + 227 + ')')\r\n        calculateHashForAllBlocks(0)\r\n\r\n    }\r\n    function mine() {\r\n        let myNonce = 0;\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myData = document.getElementById(\"data\" + props.id + \"p\" + props.peer).value\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n        while (myHash.substring(0, 4) !== Array(5).join(\"0\")) {\r\n            myNonce = myNonce + 1\r\n            myHash = calculateHashOnChange(myBlockNumber, myNonce, myData, myPrev)\r\n        }\r\n        setHash(myHash)\r\n        setBnumber(myBlockNumber)\r\n        setNonce(myNonce)\r\n        setData(myData)\r\n        setPrev(myPrev)\r\n        document.getElementById(\"result\" + props.id + \"p\" + props.peer).value = myHash\r\n        document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value = myNonce\r\n        document.getElementById(\"blockColor\" + props.id + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 6)\r\n            document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value = myHash\r\n        //Calculate\r\n        calculateHashForAllBlocks(1)\r\n        //check if next blocks hash starts with  00000\r\n        checkIfNextBlockHashesAreValid(nextBlockId)\r\n        saveBlockInDB(myHash, myBlockNumber, myNonce, myData, myPrev);\r\n    }\r\n\r\n    function saveBlockInDB(myHash, myBlockNumber, myNonce, myData, myPrev) {\r\n        let block = {\r\n            blockId: props.id,\r\n            blockNumber: myBlockNumber,\r\n            nonce: myNonce,\r\n            data: myData,\r\n            prev: myPrev,\r\n            hash: myHash,\r\n            peer: props.peer\r\n        }\r\n        BlockService.updateBlockByIdAndPeer(props.id, props.peer, block)\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n\r\n            <div id={\"blockColor\" + props.id + \"p\" + props.peer} className=\"Reactiveblock block\">\r\n                <ul>\r\n                    <li><label>Block:</label></li>\r\n                    <li><input value='#' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"blockNumber\" + props.id + \"p\" + props.peer} type=\"Number\" style={{ width: '760px' }} defaultValue={bnumber} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Nonce:</label></li>\r\n                    <li><input id={\"nonce\" + props.id + \"p\" + props.peer} defaultValue={nonce} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Data:</label></li>\r\n                    <li><textarea id={\"data\" + props.id + \"p\" + props.peer} defaultValue={data} rows={15} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Prev:</label></li>\r\n                    <li><input id={\"prev\" + props.id + \"p\" + props.peer} className=\"PrevResult\" defaultValue={prev} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Hash:</label></li>\r\n                    <li><input id={'result' + props.id + \"p\" + props.peer} className=\"HashResult\" defaultValue={hash} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li></li>\r\n                    <li><button className=\"blueButton\" onClick={mine.bind(this)}>Mine<i className=\"fa fa-refresh fa-spin\"></i></button></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Block2","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Fblock.js",["97","98","99","100","101"],"import React, { useState, useEffect } from 'react';\r\nimport BlockService from '../services/BlockService';\r\nconst SHA256 = require('crypto-js/sha256')\r\n\r\n\r\nfunction Fblock(props) {\r\n    const [bnumber, setBnumber] = useState(props.blockNumber)\r\n    const [nonce, setNonce] = useState(props.nonce)\r\n    const [coinbase, setCoinbase] = useState(props.coinbase)\r\n    const [tx, setTx] = useState(props.tx)\r\n    const [prev, setPrev] = useState(props.prev)\r\n    const [hash, setHash] = useState(props.hash)\r\n    const [tmoney] = useState([])\r\n    const [tseq] = useState([])\r\n    const [tto] = useState([])\r\n\r\n    useEffect(() => {\r\n        tx.map((t) => {\r\n            tmoney.push(disassembleTransaction(t, 'm'))\r\n            tseq.push(disassembleTransaction(t, 'q'))\r\n            tto.push(disassembleTransaction(t, 't'))\r\n        })\r\n\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 35) {\r\n            let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n            let nextBlockPrev = document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value\r\n            if (myHash !== nextBlockPrev)\r\n                alert(\"One or more blocks do not have the correct PREV value as they should!!!\")\r\n            // changeBackgroundColorOfAllBlocks('lightpink')\r\n        }\r\n\r\n    }, [])\r\n    function checkIfNextBlockHashesAreValid(startingBlock) {\r\n        for (let i = startingBlock; i < 36; i++) {\r\n            if (document.getElementById(\"result\" + i + \"p\" + props.peer).value.substring(0, 4) === Array(5).join(\"0\"))\r\n                document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        }\r\n    }\r\n    function calculateHashOnChange(block, nonce, coinbase, txData, prev) {\r\n        return SHA256(block + nonce + coinbase + txData + prev).toString()\r\n    }\r\n    function calculateHashForAllBlocks(blockOffset) {\r\n        for (let i = props.id + blockOffset; i < 36; i++) {\r\n            let tBlockNumber = document.getElementById(\"blockNumber\" + i + \"p\" + props.peer).value\r\n            let tCoinbase = collectCoinbasePartsIntoOneString(i, props.peer, \"client\")\r\n            let tNonce = document.getElementById(\"nonce\" + i + \"p\" + props.peer).value\r\n            let txData = collectAllTxIntoOneDataBlock(i, props.peer)\r\n            let tPrev = document.getElementById(\"prev\" + i + \"p\" + props.peer).value\r\n            let newHash = calculateHashOnChange(tBlockNumber, tNonce, tCoinbase, txData, tPrev)\r\n            let nextBlockId = i + 1\r\n            document.getElementById('result' + i + \"p\" + props.peer).value = newHash\r\n            if (i < 35)\r\n                document.getElementById('prev' + nextBlockId + \"p\" + props.peer).value = newHash\r\n        }\r\n    }\r\n    function changeBackgroundColorOfAllBlocks(color) {\r\n        for (let i = props.id; i < 36; i++) {\r\n            document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = color\r\n        }\r\n    }\r\n    function changeSigColorIfNeeded() {\r\n        for (let i = 0; i < tx.length; i++) {\r\n            let tMoney = document.getElementById(\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tTo = document.getElementById(\"tto\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tSeq = document.getElementById(\"tseq\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            if (tseq[i] != tSeq || tto[i] != tTo || tmoney[i] != tMoney)\r\n                document.getElementById(\"tsig\" + props.id + \"p\" + props.peer + \"i\" + i).style.color = 'red'\r\n            else\r\n                document.getElementById(\"tsig\" + props.id + \"p\" + props.peer + \"i\" + i).style.color = 'black'\r\n        }\r\n\r\n    }\r\n    function handleChange() {\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myNonce = document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value\r\n        let myCoinbase = collectCoinbasePartsIntoOneString(props.id, props.peer, \"client\")\r\n        let myTxData = collectAllTxIntoOneDataBlock(props.id, props.peer)\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        // eslint-disable-next-line\r\n        if (myBlockNumber != bnumber || myNonce != nonce || myCoinbase != convertCoinbaseDbVersionToClientVersion(coinbase) || myTxData != convertTxArrayToTxData(tx) || myPrev != prev)\r\n            changeBackgroundColorOfAllBlocks('lightpink')\r\n        else\r\n            changeBackgroundColorOfAllBlocks('rgb(' + 227 + ',' + 250 + ',' + 227 + ')')\r\n        changeSigColorIfNeeded()\r\n        calculateHashForAllBlocks(0)\r\n\r\n    }\r\n    function mine() {\r\n        let myNonce = 0;\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myCoinbase = collectCoinbasePartsIntoOneString(props.id, props.peer, \"client\")\r\n        let myTxData = collectAllTxIntoOneDataBlock(props.id, props.peer)\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n        while (myHash.substring(0, 4) !== Array(5).join(\"0\")) {\r\n            myNonce = myNonce + 1\r\n            myHash = calculateHashOnChange(myBlockNumber, myNonce, myCoinbase, myTxData, myPrev)\r\n        }\r\n        setHash(myHash)\r\n        setBnumber(myBlockNumber)\r\n        setNonce(myNonce)\r\n        let dbCoinbase = collectCoinbasePartsIntoOneString(props.id, props.peer)\r\n        setCoinbase(dbCoinbase)\r\n        let txArray = collectAllTxIntoArrayOfStrings()\r\n        setTx(txArray)\r\n        setPrev(myPrev)\r\n        document.getElementById(\"result\" + props.id + \"p\" + props.peer).value = myHash\r\n        document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value = myNonce\r\n        document.getElementById(\"blockColor\" + props.id + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 36)\r\n            document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value = myHash\r\n        calculateHashForAllBlocks(1)\r\n        checkIfNextBlockHashesAreValid(nextBlockId)\r\n\r\n        saveBlockInDB(myHash, myBlockNumber, myNonce, dbCoinbase, txArray, myPrev);\r\n    }\r\n    function disassembleTransaction(t, part) {\r\n        t = t.replace('$', '@')\r\n        t = t.replace('From:', '@')\r\n        t = t.replace('->', '@')\r\n        t = t.replace('Seq:', '@')\r\n        t = t.replace('Sig:', '@')\r\n        let tArr = t.split('@')\r\n\r\n        switch (part) {\r\n            case 'm':\r\n                return tArr[1]\r\n            case 'f':\r\n                return tArr[2]\r\n            case 't':\r\n                return tArr[3]\r\n            case 'q':\r\n                return tArr[4]\r\n            case 's':\r\n                return tArr[5]\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    function disassembleCoinbase(cb, part) {\r\n        cb = cb.replace('$', '@')\r\n        cb = cb.replace('->', '@')\r\n        let tArr = cb.split('@')\r\n\r\n        switch (part) {\r\n            case 'm':\r\n                return tArr[1]\r\n            case 't':\r\n                return tArr[2]\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    function collectCoinbasePartsIntoOneString(blockId, peer, version = \"db\") {\r\n        let coinbaseString = \"\"\r\n        let cm = document.getElementById(\"cmoney\" + blockId + \"p\" + peer).value\r\n        let ct = document.getElementById(\"cto\" + blockId + \"p\" + peer).value\r\n        if (version === \"client\") {\r\n            coinbaseString = cm + ct\r\n            return coinbaseString\r\n        } else {\r\n            coinbaseString = \"$\" + cm + \"->\" + ct\r\n            return coinbaseString\r\n        }\r\n\r\n    }\r\n\r\n    function collectAllTxIntoOneDataBlock(blockId, peer) {\r\n        let txDataBlock = \"\"\r\n        let i = 0;\r\n        while (document.getElementById(\"tmoney\" + blockId + \"p\" + peer + \"i\" + i) != null) {\r\n            let tm = document.getElementById(\"tmoney\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tf = document.getElementById(\"tfrom\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tt = document.getElementById(\"tto\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tq = document.getElementById(\"tseq\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let ts = document.getElementById(\"tsig\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            txDataBlock = txDataBlock + tm + tf + tt + tq + ts\r\n            i++\r\n        }\r\n        return txDataBlock\r\n    }\r\n    function collectAllTxIntoArrayOfStrings() {\r\n        let txArr = []\r\n        for (let i = 0; i < tx.length; i++) {\r\n            let tm = document.getElementById(\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tf = document.getElementById(\"tfrom\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tt = document.getElementById(\"tto\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tq = document.getElementById(\"tseq\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let ts = document.getElementById(\"tsig\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tString = '$' + tm + 'From:' + tf + '->' + tt + 'Seq:' + tq + 'Sig:' + ts\r\n            txArr.push(tString)\r\n        }\r\n        return txArr\r\n    }\r\n    function convertCoinbaseDbVersionToClientVersion(originalCoinbase) {\r\n        let newCoinbaseString = \"\"\r\n        originalCoinbase = originalCoinbase.replace('$', '@')\r\n        originalCoinbase = originalCoinbase.replace('->', '@')\r\n        let tArr = originalCoinbase.split('@')\r\n        newCoinbaseString = newCoinbaseString + tArr[1] + tArr[2]\r\n\r\n        return newCoinbaseString\r\n    }\r\n\r\n    function convertTxArrayToTxData(arr) {\r\n        let txDataBlock = \"\"\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].replace('$', '@')\r\n            arr[i] = arr[i].replace('From:', '@')\r\n            arr[i] = arr[i].replace('->', '@')\r\n            arr[i] = arr[i].replace('Seq:', '@')\r\n            arr[i] = arr[i].replace('Sig:', '@')\r\n            let tArr = arr[i].split('@')\r\n            txDataBlock = txDataBlock + tArr[1] + tArr[2] + tArr[3] + tArr[4] + tArr[5]\r\n        }\r\n        return txDataBlock\r\n\r\n    }\r\n\r\n    function saveBlockInDB(myHash, myBlockNumber, myNonce, dbCoinbase, txArray, myPrev) {\r\n        let block = {\r\n            blockId: props.id,\r\n            blockNumber: myBlockNumber,\r\n            nonce: myNonce,\r\n            data: props.data,\r\n            coinbase: dbCoinbase,\r\n            tx: txArray,\r\n            prev: myPrev,\r\n            hash: myHash,\r\n            peer: props.peer\r\n        }\r\n        BlockService.updateBlockByIdAndPeer(props.id, props.peer, block)\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n\r\n            <div id={\"blockColor\" + props.id + \"p\" + props.peer} className=\"Reactiveblock block\">\r\n                <ul>\r\n                    <li><label>Block:</label></li>\r\n                    <li><input value='#' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"blockNumber\" + props.id + \"p\" + props.peer} type=\"Number\" style={{ width: '755px' }} defaultValue={bnumber} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Nonce:</label></li>\r\n                    <li><input id={\"nonce\" + props.id + \"p\" + props.peer} defaultValue={nonce} style={{ width: '795px' }} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Coinbase:</label></li>\r\n                    <li><input value='$' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"cmoney\" + props.id + \"p\" + props.peer} style={{ width: '100px' }} defaultValue={disassembleCoinbase(coinbase, 'm')} rows={1} onInput={handleChange.bind(this)} /><input value='->' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"cto\" + props.id + \"p\" + props.peer} style={{ width: '610px' }} defaultValue={disassembleCoinbase(coinbase, 't')} rows={1} onInput={handleChange.bind(this)} /> </li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Tx:</label></li>\r\n                    <ul style={{ marginTop: \"-40px\", marginLeft: \"110px\" }}>\r\n                        {\r\n                            tx.map((t, index) =>\r\n                                <li><br /><br /> <input value='$' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '50px' }} defaultValue={disassembleTransaction(t, 'm')} rows={1} onInput={handleChange.bind(this)} /> <input value='From:' disabled style={{ width: '35px', textAlign: 'center' }} /><input id={\"tfrom\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '300px' }} defaultValue={disassembleTransaction(t, 'f')} rows={1} onInput={handleChange.bind(this)} /> <input value='->' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tto\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '300px' }} defaultValue={disassembleTransaction(t, 't')} rows={1} onInput={handleChange.bind(this)} /><br /><input value='Seq:' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tseq\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '30px' }} defaultValue={disassembleTransaction(t, 'q')} rows={1} onInput={handleChange.bind(this)} /><input value='Sig:' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tsig\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '680px' }} defaultValue={disassembleTransaction(t, 's')} rows={1} onInput={handleChange.bind(this)} /></li>)\r\n                        }\r\n                    </ul>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Prev:</label></li>\r\n                    <li><input id={\"prev\" + props.id + \"p\" + props.peer} className=\"PrevResult\" defaultValue={prev} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Hash:</label></li>\r\n                    <li><input id={'result' + props.id + \"p\" + props.peer} className=\"HashResult\" defaultValue={hash} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li></li>\r\n                    <li><button className=\"blueButton\" onClick={mine.bind(this)}>Mine<i className=\"fa fa-refresh fa-spin\"></i></button></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Fblock","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\services\\BlockService.js",[],"C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\Tblock.js",["102"],"import React, { useState, useEffect } from 'react';\r\nimport BlockService from '../services/BlockService';\r\nconst SHA256 = require('crypto-js/sha256')\r\n\r\n\r\nfunction Tblock(props) {\r\n    const [bnumber, setBnumber] = useState(props.blockNumber)\r\n    const [nonce, setNonce] = useState(props.nonce)\r\n    const [tx, setTx] = useState(props.tx)\r\n    const [prev, setPrev] = useState(props.prev)\r\n    const [hash, setHash] = useState(props.hash)\r\n\r\n    useEffect(() => {\r\n\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 15) {\r\n            let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n            let nextBlockPrev = document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value\r\n            if (myHash !== nextBlockPrev)\r\n                alert(\"One or more blocks do not have the correct PREV value as they should!!!\")\r\n            // changeBackgroundColorOfAllBlocks('lightpink')\r\n        }\r\n\r\n    }, [])\r\n    function calculateHashOnChange(block, nonce, txData, prev) {\r\n        return SHA256(block + nonce + txData + prev).toString()\r\n    }\r\n    function calculateHashForAllBlocks(blockOffset) {\r\n        for (let i = props.id + blockOffset; i < 16; i++) {\r\n            let tBlockNumber = document.getElementById(\"blockNumber\" + i + \"p\" + props.peer).value\r\n            let tNonce = document.getElementById(\"nonce\" + i + \"p\" + props.peer).value\r\n            let txData = collectAllTxIntoOneDataBlock(i, props.peer)\r\n            let tPrev = document.getElementById(\"prev\" + i + \"p\" + props.peer).value\r\n            let newHash = calculateHashOnChange(tBlockNumber, tNonce, txData, tPrev)\r\n            let nextBlockId = i + 1\r\n            document.getElementById('result' + i + \"p\" + props.peer).value = newHash\r\n            if (i < 15)\r\n                document.getElementById('prev' + nextBlockId + \"p\" + props.peer).value = newHash\r\n        }\r\n    }\r\n    function checkIfNextBlockHashesAreValid(startingBlock) {\r\n        for (let i = startingBlock; i < 16; i++) {\r\n            if (document.getElementById(\"result\" + i + \"p\" + props.peer).value.substring(0, 4) === Array(5).join(\"0\"))\r\n                document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        }\r\n    }\r\n    function changeBackgroundColorOfAllBlocks(color) {\r\n        for (let i = props.id; i < 16; i++) {\r\n            document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = color\r\n        }\r\n    }\r\n\r\n    function handleChange() {\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myNonce = document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value\r\n        let myTxData = collectAllTxIntoOneDataBlock(props.id, props.peer)\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        // eslint-disable-next-line\r\n        if (myBlockNumber != bnumber || myNonce != nonce || myTxData != convertTxArrayToTxData(tx) || myPrev != prev)\r\n            changeBackgroundColorOfAllBlocks('lightpink')\r\n        else\r\n            changeBackgroundColorOfAllBlocks('rgb(' + 227 + ',' + 250 + ',' + 227 + ')')\r\n        calculateHashForAllBlocks(0)\r\n\r\n    }\r\n    function mine() {\r\n        let myNonce = 0;\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myTxData = collectAllTxIntoOneDataBlock(props.id, props.peer)\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n        while (myHash.substring(0, 4) !== Array(5).join(\"0\")) {\r\n            myNonce = myNonce + 1\r\n            myHash = calculateHashOnChange(myBlockNumber, myNonce, myTxData, myPrev)\r\n        }\r\n        setHash(myHash)\r\n        setBnumber(myBlockNumber)\r\n        setNonce(myNonce)\r\n        let txArray = collectAllTxIntoArrayOfStrings()\r\n        setTx(txArray)\r\n        setPrev(myPrev)\r\n        document.getElementById(\"result\" + props.id + \"p\" + props.peer).value = myHash\r\n        document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value = myNonce\r\n        document.getElementById(\"blockColor\" + props.id + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 16)\r\n            document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value = myHash\r\n        calculateHashForAllBlocks(1)\r\n        checkIfNextBlockHashesAreValid(nextBlockId)\r\n        saveBlockInDB(myHash, myBlockNumber, myNonce, txArray, myPrev);\r\n    }\r\n    function disassembleTransaction(t, part) {\r\n        t = t.replace('$', '@')\r\n        t = t.replace('From:', '@')\r\n        t = t.replace('->', '@')\r\n        let tArr = t.split('@')\r\n\r\n        switch (part) {\r\n            case 'm':\r\n                return tArr[1]\r\n            case 'f':\r\n                return tArr[2]\r\n            case 't':\r\n                return tArr[3]\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    function collectAllTxIntoOneDataBlock(blockId, peer) {\r\n        let txDataBlock = \"\"\r\n        let i = 0;\r\n        while (document.getElementById(\"tmoney\" + blockId + \"p\" + peer + \"i\" + i) != null) {\r\n            let tm = document.getElementById(\"tmoney\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tf = document.getElementById(\"tfrom\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tt = document.getElementById(\"tto\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            txDataBlock = txDataBlock + tm + tf + tt\r\n            i++\r\n        }\r\n        return txDataBlock\r\n    }\r\n    function collectAllTxIntoArrayOfStrings() {\r\n        let txArr = []\r\n        for (let i = 0; i < tx.length; i++) {\r\n            let tm = document.getElementById(\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tf = document.getElementById(\"tfrom\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tt = document.getElementById(\"tto\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tString = '$' + tm + 'From:' + tf + '->' + tt\r\n            txArr.push(tString)\r\n        }\r\n        return txArr\r\n    }\r\n    function convertTxArrayToTxData(arr) {\r\n        let txDataBlock = \"\"\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].replace('$', '@')\r\n            arr[i] = arr[i].replace('From:', '@')\r\n            arr[i] = arr[i].replace('->', '@')\r\n            let tArr = arr[i].split('@')\r\n            txDataBlock = txDataBlock + tArr[1] + tArr[2] + tArr[3]\r\n        }\r\n        return txDataBlock\r\n\r\n    }\r\n\r\n    function saveBlockInDB(myHash, myBlockNumber, myNonce, txArray, myPrev) {\r\n        let block = {\r\n            blockId: props.id,\r\n            blockNumber: myBlockNumber,\r\n            nonce: myNonce,\r\n            data: props.data,\r\n            tx: txArray,\r\n            prev: myPrev,\r\n            hash: myHash,\r\n            peer: props.peer\r\n        }\r\n        BlockService.updateBlockByIdAndPeer(props.id, props.peer, block)\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n\r\n            <div id={\"blockColor\" + props.id + \"p\" + props.peer} className=\"Reactiveblock block\">\r\n                <ul>\r\n                    <li><label>Block:</label></li>\r\n                    <li><input value='#' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"blockNumber\" + props.id + \"p\" + props.peer} type=\"Number\" style={{ width: '760px' }} defaultValue={bnumber} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Nonce:</label></li>\r\n                    <li><input id={\"nonce\" + props.id + \"p\" + props.peer} defaultValue={nonce} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Tx:</label></li>\r\n                    <ul style={{ marginTop: \"-35px\", marginLeft: \"110px\" }}>\r\n                        {\r\n                            tx.map((t, index) =>\r\n                                <li><br /> <input value='$' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '100px' }} defaultValue={disassembleTransaction(t, 'm')} rows={1} onInput={handleChange.bind(this)} /> <input value='From:' disabled style={{ width: '35px', textAlign: 'center' }} /><input id={\"tfrom\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '100px' }} defaultValue={disassembleTransaction(t, 'f')} rows={1} onInput={handleChange.bind(this)} /> <input value='->' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tto\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '100px' }} defaultValue={disassembleTransaction(t, 't')} rows={1} onInput={handleChange.bind(this)} /></li>)\r\n                        }\r\n                    </ul>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Prev:</label></li>\r\n                    <li><input id={\"prev\" + props.id + \"p\" + props.peer} className=\"PrevResult\" defaultValue={prev} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Hash:</label></li>\r\n                    <li><input id={'result' + props.id + \"p\" + props.peer} className=\"HashResult\" defaultValue={hash} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li></li>\r\n                    <li><button className=\"blueButton\" onClick={mine.bind(this)}>Mine<i className=\"fa fa-refresh fa-spin\"></i></button></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tblock","C:\\Users\\Dolev's PC\\Desktop\\blockchain-demo\\src\\components\\TCblock.js",["103"],"import React, { useState, useEffect } from 'react';\r\nimport BlockService from '../services/BlockService';\r\nconst SHA256 = require('crypto-js/sha256')\r\n\r\n\r\nfunction TCblock(props) {\r\n    const [bnumber, setBnumber] = useState(props.blockNumber)\r\n    const [nonce, setNonce] = useState(props.nonce)\r\n    const [coinbase, setCoinbase] = useState(props.coinbase)\r\n    const [tx, setTx] = useState(props.tx)\r\n    const [prev, setPrev] = useState(props.prev)\r\n    const [hash, setHash] = useState(props.hash)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 25) {\r\n            let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n            let nextBlockPrev = document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value\r\n            if (myHash !== nextBlockPrev)\r\n                alert(\"One or more blocks do not have the correct PREV value as they should!!!\")\r\n            // changeBackgroundColorOfAllBlocks('lightpink')\r\n        }\r\n\r\n    }, [])\r\n\r\n    function calculateHashOnChange(block, nonce, coinbase, txData, prev) {\r\n        return SHA256(block + nonce + coinbase + txData + prev).toString()\r\n    }\r\n    function calculateHashForAllBlocks(blockOffset) {\r\n        for (let i = props.id + blockOffset; i < 26; i++) {\r\n            let tBlockNumber = document.getElementById(\"blockNumber\" + i + \"p\" + props.peer).value\r\n            let tCoinbase = collectCoinbasePartsIntoOneString(i, props.peer, \"client\")\r\n            let tNonce = document.getElementById(\"nonce\" + i + \"p\" + props.peer).value\r\n            let txData = collectAllTxIntoOneDataBlock(i, props.peer)\r\n            let tPrev = document.getElementById(\"prev\" + i + \"p\" + props.peer).value\r\n            let newHash = calculateHashOnChange(tBlockNumber, tNonce, tCoinbase, txData, tPrev)\r\n            let nextBlockId = i + 1\r\n            document.getElementById('result' + i + \"p\" + props.peer).value = newHash\r\n            if (i < 25)\r\n                document.getElementById('prev' + nextBlockId + \"p\" + props.peer).value = newHash\r\n        }\r\n    }\r\n    function checkIfNextBlockHashesAreValid(startingBlock) {\r\n        for (let i = startingBlock; i < 26; i++) {\r\n            if (document.getElementById(\"result\" + i + \"p\" + props.peer).value.substring(0, 4) === Array(5).join(\"0\"))\r\n                document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        }\r\n    }\r\n    function changeBackgroundColorOfAllBlocks(color) {\r\n        for (let i = props.id; i < 26; i++) {\r\n            document.getElementById(\"blockColor\" + i + \"p\" + props.peer).style.backgroundColor = color\r\n        }\r\n    }\r\n\r\n    function handleChange() {\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myNonce = document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value\r\n        let myCoinbase = collectCoinbasePartsIntoOneString(props.id, props.peer, \"client\")\r\n        let myTxData = collectAllTxIntoOneDataBlock(props.id, props.peer)\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        // eslint-disable-next-line\r\n        if (myBlockNumber != bnumber || myNonce != nonce || myCoinbase != convertCoinbaseDbVersionToClientVersion(coinbase) || myTxData != convertTxArrayToTxData(tx) || myPrev != prev)\r\n            changeBackgroundColorOfAllBlocks('lightpink')\r\n        else\r\n            changeBackgroundColorOfAllBlocks('rgb(' + 227 + ',' + 250 + ',' + 227 + ')')\r\n        calculateHashForAllBlocks(0)\r\n\r\n    }\r\n    function mine() {\r\n        let myNonce = 0;\r\n        let myBlockNumber = document.getElementById(\"blockNumber\" + props.id + \"p\" + props.peer).value\r\n        let myCoinbase = collectCoinbasePartsIntoOneString(props.id, props.peer, \"client\")\r\n        let myTxData = collectAllTxIntoOneDataBlock(props.id, props.peer)\r\n        let myPrev = document.getElementById(\"prev\" + props.id + \"p\" + props.peer).value\r\n        let myHash = document.getElementById(\"result\" + props.id + \"p\" + props.peer).value\r\n        while (myHash.substring(0, 4) !== Array(5).join(\"0\")) {\r\n            myNonce = myNonce + 1\r\n            myHash = calculateHashOnChange(myBlockNumber, myNonce, myCoinbase, myTxData, myPrev)\r\n        }\r\n        setHash(myHash)\r\n        setBnumber(myBlockNumber)\r\n        setNonce(myNonce)\r\n        let dbCoinbase = collectCoinbasePartsIntoOneString(props.id, props.peer)\r\n        setCoinbase(myCoinbase)\r\n        let txArray = collectAllTxIntoArrayOfStrings()\r\n        setTx(txArray)\r\n        setPrev(myPrev)\r\n        document.getElementById(\"result\" + props.id + \"p\" + props.peer).value = myHash\r\n        document.getElementById(\"nonce\" + props.id + \"p\" + props.peer).value = myNonce\r\n        document.getElementById(\"blockColor\" + props.id + \"p\" + props.peer).style.backgroundColor = 'rgb(' + 227 + ',' + 250 + ',' + 227 + ')'\r\n        let nextBlockId = props.id + 1\r\n        if (nextBlockId < 26)\r\n            document.getElementById(\"prev\" + nextBlockId + \"p\" + props.peer).value = myHash\r\n        calculateHashForAllBlocks(1)\r\n        checkIfNextBlockHashesAreValid(nextBlockId)\r\n        saveBlockInDB(myHash, myBlockNumber, myNonce, dbCoinbase, txArray, myPrev);\r\n    }\r\n    function disassembleTransaction(t, part) {\r\n        t = t.replace('$', '@')\r\n        t = t.replace('From:', '@')\r\n        t = t.replace('->', '@')\r\n        let tArr = t.split('@')\r\n\r\n        switch (part) {\r\n            case 'm':\r\n                return tArr[1]\r\n            case 'f':\r\n                return tArr[2]\r\n            case 't':\r\n                return tArr[3]\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    function disassembleCoinbase(part) {\r\n        let cb = coinbase\r\n        cb = cb.replace('$', '@')\r\n        cb = cb.replace('->', '@')\r\n        let tArr = cb.split('@')\r\n\r\n        switch (part) {\r\n            case 'm':\r\n                return tArr[1]\r\n            case 't':\r\n                return tArr[2]\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    function collectCoinbasePartsIntoOneString(blockId, peer, version = \"db\") {\r\n        let CoinbaseString = \"\"\r\n        let cm = document.getElementById(\"cmoney\" + blockId + \"p\" + peer).value\r\n        let ct = document.getElementById(\"cto\" + blockId + \"p\" + peer).value\r\n        if (version === \"client\") {\r\n            CoinbaseString = cm + ct\r\n            return CoinbaseString\r\n        } else {\r\n            CoinbaseString = \"$\" + cm + \"->\" + ct\r\n            return CoinbaseString\r\n        }\r\n\r\n    }\r\n\r\n    function collectAllTxIntoOneDataBlock(blockId, peer) {\r\n        let txDataBlock = \"\"\r\n        let i = 0;\r\n        while (document.getElementById(\"tmoney\" + blockId + \"p\" + peer + \"i\" + i) != null) {\r\n            let tm = document.getElementById(\"tmoney\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tf = document.getElementById(\"tfrom\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            let tt = document.getElementById(\"tto\" + blockId + \"p\" + peer + \"i\" + i).value\r\n            txDataBlock = txDataBlock + tm + tf + tt\r\n            i++\r\n        }\r\n        return txDataBlock\r\n    }\r\n    function collectAllTxIntoArrayOfStrings() {\r\n        let txArr = []\r\n        for (let i = 0; i < tx.length; i++) {\r\n            let tm = document.getElementById(\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tf = document.getElementById(\"tfrom\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tt = document.getElementById(\"tto\" + props.id + \"p\" + props.peer + \"i\" + i).value\r\n            let tString = '$' + tm + 'From:' + tf + '->' + tt\r\n            txArr.push(tString)\r\n        }\r\n        return txArr\r\n    }\r\n    function convertCoinbaseDbVersionToClientVersion(originalCoinbase) {\r\n        let newCoinbaseString = \"\"\r\n        originalCoinbase = originalCoinbase.replace('$', '@')\r\n        originalCoinbase = originalCoinbase.replace('->', '@')\r\n        let tArr = originalCoinbase.split('@')\r\n        newCoinbaseString = tArr[1] + tArr[2]\r\n        return newCoinbaseString\r\n    }\r\n\r\n    function convertTxArrayToTxData(arr) {\r\n        let txDataBlock = \"\"\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = arr[i].replace('$', '@')\r\n            arr[i] = arr[i].replace('From:', '@')\r\n            arr[i] = arr[i].replace('->', '@')\r\n            let tArr = arr[i].split('@')\r\n            txDataBlock = txDataBlock + tArr[1] + tArr[2] + tArr[3]\r\n        }\r\n        return txDataBlock\r\n\r\n    }\r\n\r\n    function saveBlockInDB(myHash, myBlockNumber, myNonce, dbCoinbase, txArray, myPrev) {\r\n        let block = {\r\n            blockId: props.id,\r\n            blockNumber: myBlockNumber,\r\n            nonce: myNonce,\r\n            data: props.data,\r\n            coinbase: dbCoinbase,\r\n            tx: txArray,\r\n            prev: myPrev,\r\n            hash: myHash,\r\n            peer: props.peer\r\n        }\r\n        BlockService.updateBlockByIdAndPeer(props.id, props.peer, block)\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n\r\n            <div id={\"blockColor\" + props.id + \"p\" + props.peer} className=\"Reactiveblock block\">\r\n                <ul>\r\n                    <li><label>Block:</label></li>\r\n                    <li><input value='#' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"blockNumber\" + props.id + \"p\" + props.peer} type=\"Number\" style={{ width: '760px' }} defaultValue={bnumber} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Nonce:</label></li>\r\n                    <li><input id={\"nonce\" + props.id + \"p\" + props.peer} defaultValue={nonce} rows={1} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Coinbase:</label></li>\r\n                    <li><input value='$' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"cmoney\" + props.id + \"p\" + props.peer} style={{ width: '100px' }} defaultValue={disassembleCoinbase('m')} rows={1} onInput={handleChange.bind(this)} /><input value='->' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"cto\" + props.id + \"p\" + props.peer} style={{ width: '100px' }} defaultValue={disassembleCoinbase('t')} rows={1} onInput={handleChange.bind(this)} /> </li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Tx:</label></li>\r\n                    <ul style={{ marginTop: \"-35px\", marginLeft: \"110px\" }}>\r\n                        {\r\n                            tx.map((t, index) =>\r\n                                <li><br /> <input value='$' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tmoney\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '100px' }} defaultValue={disassembleTransaction(t, 'm')} rows={1} onInput={handleChange.bind(this)} /> <input value='From:' disabled style={{ width: '35px', textAlign: 'center' }} /><input id={\"tfrom\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '100px' }} defaultValue={disassembleTransaction(t, 'f')} rows={1} onInput={handleChange.bind(this)} /> <input value='->' disabled style={{ width: '30px', textAlign: 'center' }} /><input id={\"tto\" + props.id + \"p\" + props.peer + \"i\" + index} style={{ width: '100px' }} defaultValue={disassembleTransaction(t, 't')} rows={1} onInput={handleChange.bind(this)} /></li>)\r\n                        }\r\n                    </ul>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Prev:</label></li>\r\n                    <li><input id={\"prev\" + props.id + \"p\" + props.peer} className=\"PrevResult\" defaultValue={prev} onInput={handleChange.bind(this)} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li><label>Hash:</label></li>\r\n                    <li><input id={'result' + props.id + \"p\" + props.peer} className=\"HashResult\" defaultValue={hash} /></li>\r\n                </ul>\r\n                <ul>\r\n                    <li></li>\r\n                    <li><button className=\"blueButton\" onClick={mine.bind(this)}>Mine<i className=\"fa fa-refresh fa-spin\"></i></button></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TCblock",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":30,"column":31,"nodeType":"110","messageId":"111","endLine":30,"endColumn":33},{"ruleId":"112","severity":1,"message":"113","line":11,"column":9,"nodeType":"114","messageId":"115","endLine":11,"endColumn":18},{"ruleId":"108","severity":1,"message":"109","line":60,"column":31,"nodeType":"110","messageId":"111","endLine":60,"endColumn":33},{"ruleId":"116","severity":1,"message":"117","line":13,"column":8,"nodeType":"118","endLine":13,"endColumn":10,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":24,"column":8,"nodeType":"118","endLine":24,"endColumn":10,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":18,"column":20,"nodeType":"124","messageId":"125","endLine":18,"endColumn":22},{"ruleId":"116","severity":1,"message":"126","line":33,"column":8,"nodeType":"118","endLine":33,"endColumn":10,"suggestions":"127"},{"ruleId":"108","severity":1,"message":"109","line":67,"column":25,"nodeType":"110","messageId":"111","endLine":67,"endColumn":27},{"ruleId":"108","severity":1,"message":"109","line":67,"column":43,"nodeType":"110","messageId":"111","endLine":67,"endColumn":45},{"ruleId":"108","severity":1,"message":"109","line":67,"column":63,"nodeType":"110","messageId":"111","endLine":67,"endColumn":65},{"ruleId":"116","severity":1,"message":"120","line":24,"column":8,"nodeType":"118","endLine":24,"endColumn":10,"suggestions":"128"},{"ruleId":"116","severity":1,"message":"120","line":26,"column":8,"nodeType":"118","endLine":26,"endColumn":10,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'DBmessage' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bringBlocks'. Either include it or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has missing dependencies: 'props.id' and 'props.peer'. Either include them or remove the dependency array.",["133"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'props.id', 'props.peer', 'tmoney', 'tseq', 'tto', and 'tx'. Either include them or remove the dependency array.",["134"],["135"],["136"],"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"139","fix":"143"},{"desc":"139","fix":"144"},"Update the dependencies array to be: [bringBlocks]",{"range":"145","text":"146"},"Update the dependencies array to be: [props.id, props.peer]",{"range":"147","text":"148"},"Update the dependencies array to be: [props.id, props.peer, tmoney, tseq, tto, tx]",{"range":"149","text":"150"},{"range":"151","text":"148"},{"range":"152","text":"148"},[360,362],"[bringBlocks]",[976,978],"[props.id, props.peer]",[1329,1331],"[props.id, props.peer, tmoney, tseq, tto, tx]",[964,966],[1029,1031]]